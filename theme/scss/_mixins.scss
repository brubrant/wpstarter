
/*********************
CLEARFIXIN'
*********************/

/* Contain floats: nicolasgallagher.com/micro-clearfix-hack/ */ 
.clearfix { 
	&:before,
	&:after {
		content: "";
    	display: table;
	}
	&:after {
		clear: both;
	}
	zoom: 1; 
}

/*********************
COLORS
*********************/

 

/*********************
TOOLS
*********************/

/* http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/ */
.image-replacement {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}

@mixin ir {
	text-indent: -9999px;
	white-space: nowrap;
	overflow: hidden;
	display: block;
}


.circular {
	border-radius: 50%;	
}


.responsive-image {
	max-width: 100%;
	height: auto;
}

hr {
	border: 1px dashed #C2C2C2;
}

.hidden {
	display: none;
}


@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}



/*********************
BORDER RADIUS
*********************/

/* @include rounded(4px); */
/* NOTE: For older browser support (and some mobile), 
don't use the shorthand to define *different* corners. */
@mixin rounded($radius: 4px) {
	-webkit-border-radius: $radius;
	   -moz-border-radius: $radius;
	        border-radius: $radius;
}

/* @include rounded-top(4px); */
@mixin rounded-top($radius: 4px) {
	-webkit-border-top-right-radius: $radius;
	-webkit-border-top-left-radius: $radius;
	-moz-border-radius-topright: $radius;
	-moz-border-radius-topleft: $radius;
	border-top-right-radius: $radius;
	border-top-left-radius: $radius;
}

/* @include rounded-right(4px); */
@mixin rounded-right($radius: 4px) {
	-webkit-border-top-right-radius: $radius;
	-webkit-border-bottom-right-radius: $radius;
	-moz-border-radius-topright: $radius;
	-moz-border-radius-bottomright: $radius;
	border-top-right-radius: $radius;
	border-bottom-right-radius: $radius;
}

/* @include rounded-bottom(4px); */
@mixin rounded-bottom($radius: 4px) {
	-webkit-border-bottom-right-radius: $radius;
	-webkit-border-bottom-left-radius: $radius;
	-moz-border-radius-bottomright: $radius;
	-moz-border-radius-bottomleft: $radius;
	border-bottom-right-radius: $radius;
	border-bottom-left-radius: $radius;
}

/* @include rounded-left(4px); */
@mixin rounded-left($radius: 4px) {
	-webkit-border-top-left-radius: $radius;
	-webkit-border-bottom-left-radius: $radius;
	-moz-border-radius-topleft: $radius;
	-moz-border-radius-bottomleft: $radius;
	border-top-left-radius: $radius;
	border-bottom-left-radius: $radius;
}

/*********************
TRANISTION
*********************/

/* @include transition(all,2s,ease-out); */
@mixin css-transition($what: all, $time: 0.2s, $how: ease-out) {
	-webkit-transition: $what $time $how;
	   -moz-transition: $what $time $how;
	     -o-transition: $what $time $how;
	        transition: $what $time $how;
}

/*********************
BOX SHADOWS
*********************/

/* @include box-shadow(5px, 5px, 10px, #000); */
@mixin box-shadow($shadow-1,
  $shadow-2: false, $shadow-3: false,
  $shadow-4: false, $shadow-5: false,
  $shadow-6: false, $shadow-7: false,
  $shadow-8: false, $shadow-9: false) {
  $full: compact($shadow-1 $shadow-2 $shadow-3 $shadow-4 $shadow-5 $shadow-6 $shadow-7 $shadow-8 $shadow-9);

  -webkit-box-shadow: $full;
     -moz-box-shadow: $full;
          box-shadow: $full;
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can 
really slow down your CSS. Don't overdue it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So 
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	   -moz-box-sizing: $type;
		  -ms-box-sizing: $type;
	        box-sizing: $type;
}

 
/*********************
BUTTONS
*********************/



.botao, .btn, a.btn, .button {

	@include css-transition();	

	&:hover {
		@include css-transition();
		
	}


}



/************************************
* Elementos gerais
************************************/




/************************************
* Mixin para criação de Sprites
************************************/

// http://compass-style.org/reference/compass/helpers/sprites/
@mixin get-sprite($map, $sprite, $repeat: no-repeat, $height: true, $width: true) {

  //http://compass-style.org/reference/compass/helpers/sprites/#sprite-file
  $sprite-image: sprite-file($map, $sprite);
  
  // http://compass-style.org/reference/compass/helpers/sprites/#sprite-url
  $sprite-map: sprite-url($map);
  
  // http://compass-style.org/reference/compass/helpers/sprites/#sprite-position
  $sprite-position: sprite-position($map, $sprite);
  
  // Returns background
  background: $sprite-map $sprite-position $repeat;
  
  // http://compass-style.org/reference/compass/helpers/image-dimensions/
  // Checks to see if the user wants height returned
  @if $height == true {
    // Gets the height of the sprite-image
    $sprite-height: image-height($sprite-image);
    // Returns the height
    height: $sprite-height; }
    
  // http://compass-style.org/reference/compass/helpers/image-dimensions/
  // Checks to see if the user wants height returned
  @if $width == true {
    // Gets the height of the sprite-image
    $sprite-width: image-width($sprite-image);
    // Returns the width
    width: $sprite-width; }
}